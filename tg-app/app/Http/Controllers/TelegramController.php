<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Telegram\Bot\Laravel\Facades\Telegram;
use Telegram\Bot\Exceptions\TelegramSDKException;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class TelegramController extends Controller
{
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram —á–µ—Ä–µ–∑ webhook.
     *
     * @param Request $request
     * @return \Illuminate\Http\Response
     */
    public function handleWebhook(Request $request)
    {

        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            $update = Telegram::getWebhookUpdate();
            $commandMode = 0;

            //–ù–µ –∑–∞–±—ã—Ç—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ!!!!!
            //Log::info('Telegram Update: ' . json_encode($update->toArray()));



            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if ($update->isType('message')) {
                $chatId = $update->getMessage()->getChat()->getId();
                $text = $update->getMessage()->getText();
              //$response = Telegram::getMe(); //Bot Indetificator

                $firstName = $update->getMessage()->getChat()->getFirstName();
                $lastName = $update->getMessage()->getChat()->getLastName();
                $userName = $update->getMessage()->getChat()->getUsername();

                             // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                             switch (strtolower($text)) {
                                 case '/start':
                                     $responseText = '<b>–ß—Ç–æ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç?</b>
–ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ —Å–∞–π—Ç–µ. <tg-emoji emoji-id="5368324170671202286">üëç</tg-emoji>';
                                     break;
                                 case '/menu':
                                     $this->sendKeyboardStart($chatId);
                                     $commandMode = 1;
                                     break;
                                 case '/add_me':
                                     $responseText = 'Data: '. $firstName. " | ". $lastName . " | ". $userName ;
                                     break;
                                 case '/help':
                                     $responseText = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                                     /start
                                     /menu
                                     /add_me
                                     /help';
                                     break;
                                 default:
                                     $responseText = "<b>–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏</b>: " ."<blockquote>" .$text. "</blockquote>";
                             }

            //$responseText = this->checkCommand($text);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if($commandMode === 0){
                    Telegram::sendMessage([
                        'chat_id' => $chatId,
                        'text' => $responseText,
                        'parse_mode' => 'HTML', // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    ]);
                }


                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
               // $this->sendKeyboard($chatId);
            }

            //–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
            if ($update->isType('callback_query')) {
                $callbackQuery = $update->getCallbackQuery();
                $chatId = $callbackQuery->getMessage()->getChat()->getId();
                $data = $callbackQuery->getData();

                $this->insert_action($chatId, $data);
                // –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
                $responseText = " –í—ã –Ω–∞–∂–∞–ª–∏: " . $data . "chatID: ".$chatId;

                Telegram::sendMessage([
                    'chat_id' => $chatId,
                    'text' => $responseText,
                ]);

                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å
               /*Telegram::answerCallbackQuery([
                    'callback_query_id' => $callbackQuery->getId(),
                    'text' => '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!',
                    'show_alert' => false,
                ]);*/
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å 200, —á—Ç–æ–±—ã Telegram –∑–Ω–∞–ª, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            return response()->json(['status' => 'success'], 200);
        } catch (TelegramSDKException $e) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            \Log::error('Telegram Bot Error: ' . $e->getMessage());
            return response()->json(['status' => 'error'], 500);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É Start.
     *
     * @param int $chatId
     * @return void
     */
    private function sendKeyboardStart($chatId)
    {
        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => '–∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', 'callback_data' => 'buttonContact'],
                    ['text' => '–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä', 'callback_data' => 'buttonAddManager'],
                ],
            ],
        ];

        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => '<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:</b>',
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode($keyboard),
        ]);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
     *
     * @param int $chatId
     * @return void
     */
    private function sendKeyboard($chatId)
    {
        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => '–ö–Ω–æ–ø–∫–∞ 1', 'callback_data' => 'button1'],
                    ['text' => '–ö–Ω–æ–ø–∫–∞ 2', 'callback_data' => 'button2'],
                ],
            ],
        ];

        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
            'reply_markup' => json_encode($keyboard),
        ]);
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function testBot()
    {
        try {
            $response = Telegram::getMe();
            return response()->json($response);
        } catch (TelegramSDKException $e) {
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }

    public function insert_action($chatId, $action)
    {
        $session = DB::table('sessions')->where('chat_id', $chatId)->first();

        if(isset($session->status)){
            return $session->status;
        }
        else{
            DB::table('sessions')->insert([
                'chat_id' => $chatId,
                'status' => $action
            ]);
            //return response("No session yet", 400);
        }
    }

    public function add_new_manager($chatId, $action)
    {
        $manager = DB::table('managers')->where('chat_id', $chatId)->first();

        if(isset($session->role)){
            return $session->role;
        }
        else{
            DB::table('managers')->insert([
                'chat_id' => $chatId,
                'first_name' => $action,
                'last_name' => $action,
                'username' => $action
            ]);
            //return response("No session yet", 400);
        }
    }

}
